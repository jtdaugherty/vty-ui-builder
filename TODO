
vBox/hBox

  * Support child spacing controls (applies to all generated boxes
    within any vBox / hBox)

  * Support child size policy controls, e.g.,

    <!-- Percentage of top-level box size -->
    <vBox sizing="50%,25%,25%">
      <ch1>...</ch1>
      <ch2>...</ch2>
      <ch3>...</ch3>
    </vBox>

    <!-- Fixed number of rows/columns -->
    <vBox sizing="25,auto,13">
      <ch1>...</ch1>
      <ch2>...</ch2>
      <ch3>...</ch3>
    </vBox>

Add support for:

  * List

    - User needs to specify internal value and widget types for the
      list (annoying)

    - Specifying initial list contents could get ugly, since we can't
      necessarily type-check the values resulting from the child
      elements of a <list>.

  * Table
  * Radio buttons
  * Limits
  * Fixed
  * Group

- think about ways to make it possible for users to include arbitrary
  widgets in the generated interfaces.  an example use case is one in
  which the widget to be included is generated by some other means or
  has no XML/builder support.  another example is a widget which must
  be generated by some third party code.

  the user may need to encode the type of the generated widget in the
  XML so that the generated source will type-check.  In addition, for
  composite widgets whose constructors do not return 'Widget a', a
  secondary type will be needed so the right type can be assigned to
  the field of the interface elements value.

  The use case for this sort of thing is one-off things that the user
  wants to write a constructor for, but for which no specific element
  DTD or handler exists (or can exist).

- make it impossible to reference focus group entry names which are
  not in the interface corresponding to a focus group (unless they are
  refs in 'common', in which case that is okay!)

- figure out how to resolve whitespace handling in fText and attr
  elements so it is clear what the semantics will be

- figure out why DTD validation isn't catching some of the attribute
  mistakes I've seen (#REQUIRED attributes are missing and the
  validator does not complain).  HaXml bug?

  Yep, HaXml bug.  Patch submitted.  Turns out multiple attribute
  lists weren't being merged as per the spec, and only the last one
  declared took precedence.  And the last one declared has no required
  attributes, since it's the auto-generated one (all #IMPLIED).
  Whoops!

- support setting render context information: skin, default attributes

- improve error reporting and reduce number of pathological error
  cases by performing up-front validation and by using more types (too
  many 'error' calls)
